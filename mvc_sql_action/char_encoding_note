背景1: 计算机只能处理0、1数字，如果要处理文本，必须先把文本转换为数字. 即字符与整数的映射关系;
         计算机中采用8个比特(bit)表示一个字节(byte)，因此一个字节能表示的最大整数是255，
         也就是说，一个字节可以表示的整数范围为0~255，所以一个字节可以表示的字符总个数为256;(而事实上大小写英文字母+数字+符号也不过128个)


背景2：由于中文字符个数远多于英文字符个数(128)，因此只使用一个字节(128)表示中文是不够 ，至少需要两个字节(65536)才能表示大部分中文;

【关于字符与字节(整数)的映射关系表】


0.编码方案：在计算机内部，使用二进制位和字节表示各种字符的映射方案；
   编码过程：将字符【按照编码方案】映射成对应的字节；
   解码过程：将字节【按照编码方案】映射成对应的字符；


1.ASCII编码：最早的编码方案，128个字符(大小写英文字母+数字+各种符号)对应于0~127的十进制整数。例如A的编码是65，z的编码是122；
                    该编码方案只使用一个字节(byte)表示一个字符，即 1字节 <—> 1字符 <—> 1整数；


2.GB2312编码：中国制定的用于表示大部分中文字符和所有英文字符的编码方案，
                       该编码方案使用两个字节表示一个字符，即 2字节 <—> 2字符 <—> 2整数；


3.Unicode编码：由于Unicode编码方案将所有语言【的字符】都统一到一套编码里，因此也被称为统一码或万国码。
                       Unicode编码通常使用两个字节表示一个字符（若是特别生僻的字符，则需要用4个字节表示）。
                       现代操作系统和大多数编程语言都直接支持Unicode编码；


背景3：如果统一成Unicode编码，乱码问题从此消失了。
          但是，如果书写文本基本上都是英文，又使用Unicode编码的话，会比用ASCII编码多出一倍的存储空间，在存储和传输上就非常浪费；


4.UTF-8编码：在背景3的作用下，出现了把Unicode编码转化为“可变长编码”的UTF-8编码。 【conversion】转化
                    UTF-8编码把一个Unicode字符【根据其对应数字大小】编程成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，
                    只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省不少空间；
ps:UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。


5.总结 - 现代计算机系统通用的字符编码工作方式：
  ①在计算机内存中，统一使用Unicode编码；
  ②当需要保存到硬盘或者需要传输的时候，则转换为UTF-8编码；
  ③用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件；
  ④浏览网页的时候，服务器会把【动态生成的Unicode内容】转换为UTF-8再传输到浏览器；

